# StudyFellow 開発日誌

## 認証システムの実装
- Supabaseを使用したGoogleログインの実装
- 認証後のリダイレクト処理の実装
- 新規ユーザーと既存ユーザーの判定ロジックの実装
  - created_atとlast_sign_in_atの比較による判定
  - 5秒の閾値を設定
- ユーザー状態に応じた適切なリダイレクト先の設定
  - 新規ユーザー: プロフィール初期化ページ
  - 既存ユーザー: ホームページ

## データベース設計と実装
- public.usersテーブルの作成
  - user_id: プライマリーキー
  - display_name: 表示名
  - user_name: ユニークなユーザー名
  - created_at: 作成日時
- 行レベルセキュリティ（RLS）ポリシーの実装
  - ユーザーは自分のデータのみアクセス可能
  - 認証済みユーザーのみデータ参照可能

## プロフィール機能の実装
- プロフィール表示ページ（/[user_name]）
  - ユーザー名に基づくダイナミックルーティング
  - プロフィール情報の表示
    - 表示名
    - ユーザー名
    - 登録日
  - ログインユーザーの場合のみ編集ボタンを表示
  - ダークモード対応
  - レスポンシブデザイン

- プロフィール編集ページ（/profile/edit）
  - ログインユーザーのみアクセス可能
  - 表示名とユーザー名の編集機能
  - フォームバリデーション
  - エラーハンドリング
  - キャンセルと保存機能
  - 更新後のプロフィールページへのリダイレクト

## UI/UX 改善
- ローディング状態の表示
- エラーメッセージの日本語化
- ユーザーフレンドリーなエラーハンドリング
- 一貫性のあるデザインシステム
- ダークモード対応
- レスポンシブデザイン

## セキュリティ対策
- 適切な認証チェック
- ユーザー権限の管理
- データベースレベルのセキュリティ
- セッション管理
- エラーハンドリングの実装

## 今後の課題
- プロフィール画像のアップロード機能
- 自己紹介文の追加
- プロフィールの公開/非公開設定
- ユーザー名の重複チェック
- パスワード変更機能
- メールアドレス変更機能
- アカウント削除機能

Webhookに直接API_KEY書き込んでいいのか？

## PDFメタデータ管理機能の実装

### データベース設計
- document_metadataテーブルの作成
  - id: UUID (プライマリーキー)
  - file_name: TEXT (必須)
  - bucket: TEXT (必須)
  - title: TEXT (デフォルト: 空文字)
  - total_pages: INTEGER
  - file_size: BIGINT
  - created_at: TIMESTAMP WITH TIMEZONE
  - status: TEXT (デフォルト: 'unprocessed')

### セキュリティ設定
- RLS (Row Level Security) の実装
  - 認証済みユーザー: 読み取りのみ許可
  - 匿名ユーザー: 全アクセス拒否
  - service_role: 全ての操作が可能（RLSバイパス）

### Edge Function (create-document-metadata)
- PDFファイルのメタデータ自動処理機能
  - ストレージイベントをトリガーとして実行
  - PDFファイルのみを処理対象
  - ファイル追加時の処理:
    - PDFのページ数を自動計算
    - ファイルサイズの記録
    - メタデータをデータベースに保存
  - ファイル削除時の処理:
    - 該当するメタデータのstatusを'deleted'に更新
    - メタデータが見つからない場合は404エラーを返す

### セキュリティ強化
- Edge Functionの実行権限制御
  - invoke_roleをservice_roleに設定
  - 一般ユーザーからの直接実行を防止
  - ストレージWebhookからの実行は許可

### 今後の課題
- PDFファイルからのメタデータ抽出機能の拡張
  - タイトルの自動抽出
  - 作成日時の取得
  - その他のメタデータの活用
- バッチ処理による既存ファイルのメタデータ更新
- メタデータの一括管理機能の実装

課題
- chatのコンテキストをどう扱うか
- チャットの読み込みの効率化
- cascadeがちゃんと有効になっているか
- corsの設定
- 投稿のrealtime取得